networks:
  noxguard-prod-network:
    driver: bridge
services:
  grafana-prod:
    container_name: noxguard-grafana-prod
    environment:
    - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    - GF_USERS_ALLOW_SIGN_UP=false
    - GF_SERVER_ROOT_URL=https://your-domain.com/grafana
    image: grafana/grafana:latest
    ports:
    - 3001:3000
    restart: unless-stopped
    volumes:
    - grafana_data_prod:/var/lib/grafana
    - ./grafana/provisioning:/etc/grafana/provisioning:ro
  nginx-prod:
    container_name: noxguard-nginx-prod
    depends_on:
    - noxguard-api-prod
    - grafana-prod
    image: nginx:alpine
    ports:
    - 80:80
    - 443:443
    restart: unless-stopped
    volumes:
    - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
    - ./ssl:/etc/nginx/ssl:ro
  noxguard-api-prod:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    container_name: noxguard-api-prod
    depends_on:
    - postgres-prod
    - redis-prod
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
    - ENVIRONMENT=production
    - LOG_LEVEL=INFO
    - DATABASE_URL=${DATABASE_URL}
    - JWT_SECRET=${JWT_SECRET}
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 60s
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/health
      timeout: 10s
    ports:
    - 8000:8000
    restart: unless-stopped
  postgres-prod:
    container_name: noxguard-postgres-prod
    deploy:
      resources:
        limits:
          memory: 1G
    environment:
    - POSTGRES_DB=${POSTGRES_DB}
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
    - postgres_data_prod:/var/lib/postgresql/data
    - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  redis-prod:
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    container_name: noxguard-redis-prod
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
    - redis_data_prod:/data
version: "3.8"
volumes:
  grafana_data_prod: null
  postgres_data_prod: null
  redis_data_prod: null
