version: "3.8"

services:
  # Redis Cache Layer
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # API Gateway (FastAPI)
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    ports:
      - "8080:8080"
    environment:
      - REDIS_URL=redis://redis:6379
      - AI_SERVICE_URL=http://ai-inference:8083
    depends_on:
      - redis
      - ai-inference
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # AI Model Inference Service
  ai-inference:
    build:
      context: .
      dockerfile: Dockerfile.ai
    ports:
      - "8083:8083"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - MODEL_CACHE_DIR=/app/models
    volumes:
      - ai_models:/app/models
      - ./ai_model_integration.py:/app/ai_model_integration.py
    runtime: nvidia  # Requires nvidia-docker
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: .
      dockerfile: Dockerfile.microservice
    ports:
      - "8081:8081"
    environment:
      - SERVICE_NAME=user-service
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped

  # Data Service
  data-service:
    build:
      context: .
      dockerfile: Dockerfile.microservice
    ports:
      - "8082:8082"
    environment:
      - SERVICE_NAME=data-service
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped

  # Security Service
  security-service:
    build:
      context: .
      dockerfile: Dockerfile.security
    ports:
      - "8084:8084"
    environment:
      - JWT_SECRET=${JWT_SECRET:-ultimate_suite_secret}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped

  # Monitoring & Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

volumes:
  redis_data:
  ai_models:
  prometheus_data:

networks:
  default:
    driver: bridge
