# ðŸš€ ULTIMATE SUITE v11.0 - ADVANCED CONTAINER ORCHESTRATION
# ===========================================================
# Production-ready Docker Compose with scaling, monitoring, and load balancing

version: "3.8"

networks:
  ultimate_suite_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  ai_models:
    driver: local

services:
  # Redis Cache Cluster
  redis-master:
    image: redis:7-alpine
    container_name: ultimate_redis_master
    restart: unless-stopped
    networks:
      ultimate_suite_network:
        ipv4_address: 172.20.0.10
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  # Load Balancer (NGINX)
  nginx-lb:
    image: nginx:alpine
    container_name: ultimate_nginx_lb
    restart: unless-stopped
    networks:
      ultimate_suite_network:
        ipv4_address: 172.20.0.5
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - fastapi-1
      - fastapi-2
      - fastapi-3
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Performance Servers (Scaled)
  fastapi-1:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: ultimate_fastapi_1
    restart: unless-stopped
    networks:
      ultimate_suite_network:
        ipv4_address: 172.20.0.11
    ports:
      - "8001:8000"
    environment:
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - INSTANCE_ID=1
      - ENVIRONMENT=production
    volumes:
      - ai_models:/app/models
    depends_on:
      - redis-master
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  fastapi-2:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: ultimate_fastapi_2
    restart: unless-stopped
    networks:
      ultimate_suite_network:
        ipv4_address: 172.20.0.12
    ports:
      - "8002:8000"
    environment:
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - INSTANCE_ID=2
      - ENVIRONMENT=production
    volumes:
      - ai_models:/app/models
    depends_on:
      - redis-master
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  fastapi-3:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: ultimate_fastapi_3
    restart: unless-stopped
    networks:
      ultimate_suite_network:
        ipv4_address: 172.20.0.13
    ports:
      - "8003:8000"
    environment:
      - REDIS_HOST=redis-master
      - REDIS_PORT=6379
      - INSTANCE_ID=3
      - ENVIRONMENT=production
    volumes:
      - ai_models:/app/models
    depends_on:
      - redis-master
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ultimate_prometheus
    restart: unless-stopped
    networks:
      ultimate_suite_network:
        ipv4_address: 172.20.0.20
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ultimate_grafana
    restart: unless-stopped
    networks:
      ultimate_suite_network:
        ipv4_address: 172.20.0.21
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: ultimate_node_exporter
    restart: unless-stopped
    networks:
      - ultimate_suite_network
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  # cAdvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: ultimate_cadvisor
    restart: unless-stopped
    networks:
      - ultimate_suite_network
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true

  # ElasticSearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ultimate_elasticsearch
    restart: unless-stopped
    networks:
      - ultimate_suite_network
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ultimate_kibana
    restart: unless-stopped
    networks:
      - ultimate_suite_network
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  # Auto-scaler service
  autoscaler:
    build:
      context: .
      dockerfile: Dockerfile.autoscaler
    container_name: ultimate_autoscaler
    restart: unless-stopped
    networks:
      - ultimate_suite_network
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - PROMETHEUS_URL=http://prometheus:9090
      - SCALE_UP_THRESHOLD=80
      - SCALE_DOWN_THRESHOLD=20
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
