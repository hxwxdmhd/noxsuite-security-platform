<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🧠 AI Model Monitor - NoxPanel</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #2563eb;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --error-color: #ef4444;
            --bg-dark: #1f2937;
            --bg-card: #374151;
        }
        
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        .dashboard-container {
            padding: 2rem 0;
        }
        
        .status-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
        }
        
        .status-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 45px rgba(0, 0, 0, 0.15);
        }
        
        .model-status {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 10px;
            margin-bottom: 1rem;
            border-left: 4px solid #e5e7eb;
        }
        
        .model-status.online {
            border-left-color: var(--success-color);
            background: linear-gradient(135deg, #ecfdf5 0%, #f0fdf4 100%);
        }
        
        .model-status.offline {
            border-left-color: var(--error-color);
            background: linear-gradient(135deg, #fef2f2 0%, #fef7f7 100%);
        }
        
        .model-status.degraded {
            border-left-color: var(--warning-color);
            background: linear-gradient(135deg, #fffbeb 0%, #fefce8 100%);
        }
        
        .status-indicator {
            font-size: 1.5rem;
            margin-right: 0.5rem;
        }
        
        .model-info h5 {
            margin: 0;
            font-weight: 600;
            color: #1f2937;
        }
        
        .model-meta {
            font-size: 0.875rem;
            color: #6b7280;
            margin: 0.25rem 0;
        }
        
        .model-actions {
            display: flex;
            gap: 0.5rem;
        }
        
        .btn-action {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .btn-test {
            background: var(--primary-color);
            color: white;
        }
        
        .btn-test:hover {
            background: #1d4ed8;
            transform: scale(1.05);
        }
        
        .btn-restart {
            background: var(--warning-color);
            color: white;
        }
        
        .btn-restart:hover {
            background: #d97706;
            transform: scale(1.05);
        }
        
        .summary-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: rgba(255, 255, 255, 0.9);
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }
        
        .stat-label {
            color: #6b7280;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        
        .online { color: var(--success-color); }
        .offline { color: var(--error-color); }
        .degraded { color: var(--warning-color); }
        
        .refresh-indicator {
            display: inline-block;
            animation: spin 2s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .latency-badge {
            background: var(--success-color);
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .error-message {
            background: #fef2f2;
            color: #dc2626;
            padding: 0.5rem;
            border-radius: 6px;
            font-size: 0.875rem;
            margin-top: 0.5rem;
        }
        
        .auto-refresh {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.875rem;
        }
        
        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }
        
        .confetti {
            position: fixed;
            width: 10px;
            height: 10px;
            background: #f59e0b;
            animation: confetti-fall 3s linear infinite;
        }
        
        @keyframes confetti-fall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(720deg);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div class="container dashboard-container">
        <!-- Header -->
        <div class="text-center mb-4">
            <h1 class="text-white">🧠 AI Model Monitor</h1>
            <p class="text-white-50">Real-time AI model health monitoring and management</p>
            <small class="text-white-50">Last updated: {{ timestamp.strftime('%Y-%m-%d %H:%M:%S') }}</small>
        </div>
        
        <!-- Summary Statistics -->
        <div class="summary-stats">
            <div class="stat-card">
                <div class="stat-value online">{{ summary.online_count }}</div>
                <div class="stat-label">Online Models</div>
            </div>
            <div class="stat-card">
                <div class="stat-value offline">{{ summary.offline_count }}</div>
                <div class="stat-label">Offline Models</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{{ summary.avg_latency }}ms</div>
                <div class="stat-label">Avg Response Time</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{{ summary.health_percentage }}%</div>
                <div class="stat-label">System Health</div>
            </div>
        </div>
        
        <!-- Model Status Cards -->
        <div class="row">
            {% for model_key, model in models.items() %}
            <div class="col-md-6 col-lg-4">
                <div class="status-card">
                    <div class="model-status {{ 'online' if model.status == '🟢' else 'offline' if model.status == '🔴' else 'degraded' }}">
                        <div class="model-info">
                            <h5>
                                <span class="status-indicator">{{ model.status }}</span>
                                {{ model.name }}
                            </h5>
                            <div class="model-meta">
                                <strong>Provider:</strong> {{ model.provider }}<br>
                                <strong>Endpoint:</strong> {{ model.endpoint }}
                                {% if model.current_model %}
                                <br><strong>Model:</strong> {{ model.current_model }}
                                {% endif %}
                            </div>
                            
                            {% if model.latency_ms %}
                            <div class="mt-2">
                                <span class="latency-badge">{{ model.latency_ms|round }}ms</span>
                            </div>
                            {% endif %}
                            
                            {% if model.error_message %}
                            <div class="error-message">
                                <i class="fas fa-exclamation-triangle"></i> {{ model.error_message }}
                            </div>
                            {% endif %}
                            
                            {% if model.restart_attempts > 0 %}
                            <div class="mt-2">
                                <small class="text-warning">
                                    <i class="fas fa-redo"></i> Restart attempts: {{ model.restart_attempts }}/{{ model.max_restart_attempts }}
                                </small>
                            </div>
                            {% endif %}
                        </div>
                        
                        <div class="model-actions">
                            <a href="{{ url_for('ai.test_model_ui', provider=model_key) }}" 
                               class="btn-action btn-test" title="Test Communication">
                                <i class="fas fa-vial"></i>
                            </a>
                            <a href="{{ url_for('ai.restart_model_ui', provider=model_key) }}" 
                               class="btn-action btn-restart" title="Restart Service">
                                <i class="fas fa-redo"></i>
                            </a>
                        </div>
                    </div>
                    
                    {% if model.last_checked %}
                    <div class="text-muted small">
                        Last checked: {{ model.last_checked[:19] }}
                    </div>
                    {% endif %}
                </div>
            </div>
            {% endfor %}
        </div>
        
        <!-- Action Buttons -->
        <div class="text-center mt-4">
            <a href="{{ url_for('ai.dashboard') }}" class="btn btn-primary me-2">
                <i class="fas fa-sync refresh-indicator"></i> Refresh Status
            </a>
            <a href="{{ url_for('ai.logs') }}" class="btn btn-secondary me-2">
                <i class="fas fa-file-alt"></i> View Logs
            </a>
            <a href="{{ url_for('ai.settings') }}" class="btn btn-info">
                <i class="fas fa-cog"></i> Settings
            </a>
        </div>
        
        <!-- Auto-refresh indicator -->
        <div class="auto-refresh">
            <i class="fas fa-sync-alt"></i> Auto-refresh: 30s
        </div>
    </div>
    
    <!-- Toast container for notifications -->
    <div class="toast-container">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="toast show" role="alert" data-bs-autohide="true" data-bs-delay="5000">
                    <div class="toast-header">
                        {% if category == 'success' %}
                        <i class="fas fa-check-circle text-success me-2"></i>
                        {% elif category == 'error' %}
                        <i class="fas fa-exclamation-circle text-danger me-2"></i>
                        {% else %}
                        <i class="fas fa-info-circle text-warning me-2"></i>
                        {% endif %}
                        <strong class="me-auto">AI Monitor</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">{{ message }}</div>
                </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Auto-refresh every 30 seconds
        let refreshInterval = setInterval(() => {
            window.location.reload();
        }, 30000);
        
        // Show confetti when models come online
        function showConfetti() {
            for (let i = 0; i < 50; i++) {
                setTimeout(() => {
                    const confetti = document.createElement('div');
                    confetti.className = 'confetti';
                    confetti.style.left = Math.random() * 100 + 'vw';
                    confetti.style.backgroundColor = ['#10b981', '#f59e0b', '#3b82f6', '#ef4444'][Math.floor(Math.random() * 4)];
                    confetti.style.animationDelay = Math.random() * 3 + 's';
                    document.body.appendChild(confetti);
                    
                    setTimeout(() => {
                        confetti.remove();
                    }, 3000);
                }, i * 50);
            }
        }
        
        // Check for newly online models
        {% if summary.online_count > 0 %}
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('celebrate') === 'true') {
            showConfetti();
        }
        {% endif %}
        
        // Initialize tooltips
        const tooltips = document.querySelectorAll('[title]');
        tooltips.forEach(tooltip => {
            new bootstrap.Tooltip(tooltip);
        });
        
        // API status checking functions
        async function testModel(provider) {
            try {
                const response = await fetch(`/ai/api/test/${provider}`, {
                    method: 'POST'
                });
                const result = await response.json();
                
                if (result.success) {
                    showToast(`✅ ${provider} is responding`, 'success');
                } else {
                    showToast(`❌ ${provider} test failed`, 'error');
                }
            } catch (error) {
                showToast(`❌ Error testing ${provider}`, 'error');
            }
        }
        
        async function restartModel(provider) {
            try {
                showToast(`🔄 Restarting ${provider}...`, 'info');
                
                const response = await fetch(`/ai/api/restart/${provider}`, {
                    method: 'POST'
                });
                const result = await response.json();
                
                if (result.success && result.result.test_success) {
                    showToast(`🎉 ${provider} restarted successfully!`, 'success');
                    showConfetti();
                } else {
                    showToast(`❌ Failed to restart ${provider}`, 'error');
                }
            } catch (error) {
                showToast(`❌ Error restarting ${provider}`, 'error');
            }
        }
        
        function showToast(message, type) {
            const toastHtml = `
                <div class="toast show" role="alert" data-bs-autohide="true" data-bs-delay="5000">
                    <div class="toast-header">
                        <i class="fas fa-${type === 'success' ? 'check-circle text-success' : type === 'error' ? 'exclamation-circle text-danger' : 'info-circle text-warning'} me-2"></i>
                        <strong class="me-auto">AI Monitor</strong>
                        <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">${message}</div>
                </div>
            `;
            
            const container = document.querySelector('.toast-container');
            container.insertAdjacentHTML('beforeend', toastHtml);
            
            // Auto-remove after delay
            setTimeout(() => {
                const toasts = container.querySelectorAll('.toast');
                if (toasts.length > 0) {
                    toasts[0].remove();
                }
            }, 5000);
        }
        
        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'r') {
                e.preventDefault();
                window.location.reload();
            }
        });
        
        console.log('🧠 AI Model Monitor Dashboard loaded');
    </script>
</body>
</html>
