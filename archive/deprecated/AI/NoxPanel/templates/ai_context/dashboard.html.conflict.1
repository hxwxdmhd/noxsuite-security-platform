{% extends "base.html" %}

{% block title %}AI Context Loader - NoxPanel{% endblock %}

{% block page_title %}üß† AI Context & Memory{% endblock %}

{% block page_actions %}
<div class="btn-group" role="group">
    <button type="button" class="btn btn-outline-primary" onclick="refreshContext()">
        <i class="bi bi-arrow-clockwise"></i> Refresh
    </button>
    <button type="button" class="btn btn-outline-success" onclick="reloadFiles()">
        <i class="bi bi-download"></i> Reload Files
    </button>
    <button type="button" class="btn btn-outline-info" onclick="exportContext()">
        <i class="bi bi-upload"></i> Export Context
    </button>
    <button type="button" class="btn btn-outline-warning" onclick="testSearch()">
        <i class="bi bi-search"></i> Test Search
    </button>
</div>
{% endblock %}

{% block main_content %}
<div class="row" data-auto-refresh="true">
    <!-- Context Statistics -->
    <div class="col-lg-12 mb-4">
        <div class="card bg-gradient-primary text-white">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col">
                        <h3 class="card-title mb-0">
                            <i class="bi bi-brain"></i> AI Context Memory System
                        </h3>
                        <p class="card-text mb-0 opacity-75">Intelligent context loading from conversations and training data</p>
                    </div>
                    <div class="col-auto">
                        <div class="d-flex align-items-center">
                            <div class="text-center me-4">
                                <div class="h4 mb-0" id="totalItems">{{ stats.total_items }}</div>
                                <small class="opacity-75">Total Items</small>
                            </div>
                            <div class="text-center me-4">
                                <div class="h4 mb-0" id="sourceCount">{{ stats.by_source|length }}</div>
                                <small class="opacity-75">Sources</small>
                            </div>
                            <div class="text-center">
                                <div class="h4 mb-0 text-success" id="loadStatus">
                                    {% if stats.last_loaded %}‚úÖ{% else %}‚ö†Ô∏è{% endif %}
                                </div>
                                <small class="opacity-75">Status</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search Interface -->
    <div class="col-lg-8">
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-search"></i> Context Search
                </h5>
            </div>
            <div class="card-body">
                <div class="row g-3">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" id="searchQuery" placeholder="Search context memory..." onkeyup="handleSearchInput()">
                        </div>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="searchSource">
                            <option value="">All Sources</option>
                            <option value="gpt_dump">GPT Dump</option>
                            <option value="training_data">Training Data</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button class="btn btn-primary w-100" onclick="performSearch()">
                            <i class="bi bi-search"></i> Search
                        </button>
                    </div>
                </div>
                
                <div class="mt-3">
                    <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-outline-secondary" onclick="quickSearch('python')">Python</button>
                        <button type="button" class="btn btn-outline-secondary" onclick="quickSearch('automation')">Automation</button>
                        <button type="button" class="btn btn-outline-secondary" onclick="quickSearch('flask')">Flask</button>
                        <button type="button" class="btn btn-outline-secondary" onclick="quickSearch('AI')">AI</button>
                        <button type="button" class="btn btn-outline-secondary" onclick="quickSearch('ollama')">Ollama</button>
                        <button type="button" class="btn btn-outline-secondary" onclick="quickSearch('security')">Security</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Search Results -->
        <div class="card" id="searchResultsCard" style="display: none;">
            <div class="card-header d-flex justify-content-between">
                <h6 class="card-title mb-0">
                    <i class="bi bi-list-ul"></i> Search Results
                </h6>
                <span class="badge bg-primary" id="resultCount">0</span>
            </div>
            <div class="card-body">
                <div id="searchResults">
                    <!-- Search results will be populated here -->
                </div>
            </div>
        </div>

        <!-- Context Chunk Preview -->
        <div class="card mt-4">
            <div class="card-header d-flex justify-content-between">
                <h6 class="card-title mb-0">
                    <i class="bi bi-file-text"></i> AI Context Chunk Preview
                </h6>
                <div class="btn-group btn-group-sm">
                    <button class="btn btn-outline-primary" onclick="generateChunk(1000)">1K</button>
                    <button class="btn btn-outline-primary" onclick="generateChunk(2000)">2K</button>
                    <button class="btn btn-outline-primary" onclick="generateChunk(4000)">4K</button>
                </div>
            </div>
            <div class="card-body">
                <div class="bg-dark text-light p-3 rounded" style="height: 300px; overflow-y: auto; font-family: monospace; font-size: 0.875rem;" id="contextChunk">
                    Click a button above to generate an AI context chunk...
                </div>
                <div class="mt-2">
                    <small class="text-muted">Length: <span id="chunkLength">0</span> characters</small>
                </div>
            </div>
        </div>
    </div>

    <!-- Stats & File Status -->
    <div class="col-lg-4">
        <!-- File Status -->
        <div class="card mb-3">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="bi bi-files"></i> Source Files
                </h6>
            </div>
            <div class="card-body">
                <div class="list-group list-group-flush">
                    <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                        <div>
                            <i class="bi bi-file-text text-primary me-2"></i>
                            <span class="small">gpt_dump_context.txt</span>
                        </div>
                        <span class="badge {% if stats.files_status.gpt_dump_context %}bg-success{% else %}bg-danger{% endif %}">
                            {% if stats.files_status.gpt_dump_context %}Found{% else %}Missing{% endif %}
                        </span>
                    </div>
                    <div class="list-group-item d-flex justify-content-between align-items-center px-0">
                        <div>
                            <i class="bi bi-file-code text-info me-2"></i>
                            <span class="small">training_data.jsonl</span>
                        </div>
                        <span class="badge {% if stats.files_status.training_data %}bg-success{% else %}bg-danger{% endif %}">
                            {% if stats.files_status.training_data %}Found{% else %}Missing{% endif %}
                        </span>
                    </div>
                </div>
                
                <div class="mt-3">
                    <button class="btn btn-sm btn-primary w-100" onclick="checkFiles()">
                        <i class="bi bi-check-circle"></i> Check Files
                    </button>
                </div>
            </div>
        </div>

        <!-- Source Breakdown -->
        <div class="card mb-3">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="bi bi-pie-chart"></i> Source Breakdown
                </h6>
            </div>
            <div class="card-body">
                {% for source, count in stats.by_source.items() %}
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <span class="small">{{ source.replace('_', ' ').title() }}</span>
                    <div>
                        <span class="badge bg-primary">{{ count }}</span>
                    </div>
                </div>
                {% endfor %}
                
                {% if not stats.by_source %}
                <p class="text-muted text-center mb-0">No context items loaded</p>
                {% endif %}
            </div>
        </div>

        <!-- Top Tags -->
        <div class="card mb-3">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="bi bi-tags"></i> Popular Tags
                </h6>
            </div>
            <div class="card-body">
                <div class="d-flex flex-wrap gap-1">
                    {% for tag, count in (stats.by_tags.items() | list)[:20] %}
                    <span class="badge bg-secondary cursor-pointer" onclick="quickSearch('{{ tag }}')" title="{{ count }} items">
                        {{ tag }}
                    </span>
                    {% endfor %}
                </div>
                
                {% if not stats.by_tags %}
                <p class="text-muted text-center mb-0">No tags available</p>
                {% endif %}
            </div>
        </div>

        <!-- System Status -->
        <div class="card">
            <div class="card-header">
                <h6 class="card-title mb-0">
                    <i class="bi bi-info-circle"></i> System Info
                </h6>
            </div>
            <div class="card-body">
                <div class="small">
                    <div class="mb-2">
                        <strong>Last Loaded:</strong><br>
                        <span class="text-muted">
                            {% if stats.last_loaded %}
                                {{ stats.last_loaded[:19] }}
                            {% else %}
                                Never
                            {% endif %}
                        </span>
                    </div>
                    <div class="mb-2">
                        <strong>Auto-refresh:</strong><br>
                        <span class="text-success">Every 10 minutes</span>
                    </div>
                    <div>
                        <strong>Integration:</strong><br>
                        <span class="text-info">Ready for AI prompts</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
// AI Context JavaScript
let searchTimeout;

function refreshContext() {
    showToast('Refreshing context data...', 'info');
    location.reload();
}

function reloadFiles() {
    showToast('Reloading context files...', 'info');
    
    fetch('/ai-context/api/reload', {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showToast('Context files reloaded successfully', 'success');
            updateStats(data.stats);
        } else {
            showToast('Failed to reload context files', 'danger');
        }
    })
    .catch(error => {
        showToast('Error reloading files', 'danger');
    });
}

function updateStats(stats) {
    document.getElementById('totalItems').textContent = stats.total_items;
    document.getElementById('sourceCount').textContent = Object.keys(stats.by_source).length;
    document.getElementById('loadStatus').textContent = stats.last_loaded ? '‚úÖ' : '‚ö†Ô∏è';
}

function handleSearchInput() {
    const query = document.getElementById('searchQuery').value;
    
    // Clear existing timeout
    if (searchTimeout) {
        clearTimeout(searchTimeout);
    }
    
    // Auto-search after 500ms of no typing
    if (query.length > 2) {
        searchTimeout = setTimeout(() => {
            performSearch();
        }, 500);
    } else if (query.length === 0) {
        hideSearchResults();
    }
}

function performSearch() {
    const query = document.getElementById('searchQuery').value;
    const source = document.getElementById('searchSource').value;
    
    if (!query.trim()) {
        hideSearchResults();
        return;
    }
    
    showToast('Searching context...', 'info');
    
    const params = new URLSearchParams({
        q: query,
        limit: 20
    });
    
    if (source) {
        params.append('source', source);
    }
    
    fetch(`/ai-context/api/search?${params}`)
        .then(response => response.json())
        .then(data => {
            displaySearchResults(data);
            showToast(`Found ${data.total} results`, 'success');
        })
        .catch(error => {
            showToast('Search failed', 'danger');
        });
}

function displaySearchResults(data) {
    const resultsContainer = document.getElementById('searchResults');
    const resultCount = document.getElementById('resultCount');
    const resultsCard = document.getElementById('searchResultsCard');
    
    resultCount.textContent = data.total;
    
    if (data.results.length === 0) {
        resultsContainer.innerHTML = '<p class="text-muted text-center">No results found</p>';
    } else {
        let html = '';
        data.results.forEach(result => {
            html += `
                <div class="border rounded p-3 mb-3">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <div>
                            <span class="badge bg-${result.source === 'gpt_dump' ? 'primary' : 'info'}">${result.source.replace('_', ' ')}</span>
                            <small class="text-muted ms-2">ID: ${result.id}</small>
                        </div>
                        <span class="badge bg-success">${result.relevance_score}</span>
                    </div>
                    <div class="mb-2">
                        <small class="text-muted">Tags: ${result.tags.join(', ') || 'None'}</small>
                    </div>
                    <div class="text-break" style="font-size: 0.9rem;">
                        ${result.content.replace(new RegExp(data.query, 'gi'), '<mark>$&</mark>')}
                    </div>
                    <div class="text-end mt-2">
                        <button class="btn btn-sm btn-outline-primary" onclick="useInPrompt('${result.id}')">
                            <i class="bi bi-plus"></i> Use in Prompt
                        </button>
                    </div>
                </div>
            `;
        });
        resultsContainer.innerHTML = html;
    }
    
    resultsCard.style.display = 'block';
    resultsCard.scrollIntoView({ behavior: 'smooth' });
}

function hideSearchResults() {
    document.getElementById('searchResultsCard').style.display = 'none';
}

function quickSearch(term) {
    document.getElementById('searchQuery').value = term;
    performSearch();
}

function generateChunk(maxTokens) {
    showToast(`Generating ${maxTokens} token context chunk...`, 'info');
    
    fetch(`/ai-context/api/chunk?max_tokens=${maxTokens}`)
        .then(response => response.json())
        .then(data => {
            document.getElementById('contextChunk').textContent = data.chunk;
            document.getElementById('chunkLength').textContent = data.length;
            showToast('Context chunk generated', 'success');
        })
        .catch(error => {
            showToast('Failed to generate chunk', 'danger');
        });
}

function useInPrompt(itemId) {
    showToast(`Adding item ${itemId} to prompt context`, 'info');
    // TODO: Implement prompt integration
}

function checkFiles() {
    showToast('Checking file status...', 'info');
    
    fetch('/ai-context/api/stats')
        .then(response => response.json())
        .then(data => {
            showToast('File status updated', 'success');
            // TODO: Update file status indicators
        })
        .catch(error => {
            showToast('Failed to check files', 'danger');
        });
}

function exportContext() {
    showToast('Exporting context data...', 'info');
    // TODO: Implement context export
}

function testSearch() {
    const testQueries = ['python', 'automation', 'AI', 'flask', 'security'];
    const randomQuery = testQueries[Math.floor(Math.random() * testQueries.length)];
    
    document.getElementById('searchQuery').value = randomQuery;
    performSearch();
}

// Auto-refresh stats every 5 minutes
setInterval(() => {
    fetch('/ai-context/api/stats')
        .then(response => response.json())
        .then(data => {
            updateStats(data);
        })
        .catch(error => {
            console.log('Auto-refresh failed:', error);
        });
}, 300000); // 5 minutes

// Initialize
document.addEventListener('DOMContentLoaded', () => {
    // Generate initial context chunk
    generateChunk(2000);
});
</script>

<style>
.bg-gradient-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.cursor-pointer {
    cursor: pointer;
}

.cursor-pointer:hover {
    opacity: 0.8;
}

mark {
    background-color: #fff3cd;
    padding: 2px 4px;
    border-radius: 3px;
}

#contextChunk {
    white-space: pre-wrap;
    word-wrap: break-word;
}
</style>
{% endblock %}
