#!/usr/bin/env python3
"""
🎯 NoxPanel Enhanced Application Launcher v6.0
============================================
Main Flask application with all enhanced features and modules

✅ All Deep Analysis Engine features integrated
✅ Comprehensive route management  
✅ Modern Bootstrap 5 UI
✅ Complete platform coverage
"""

from webpanel.vm_routes import vm_bp
from webpanel.updates_routes import updates_bp
from webpanel.setup_routes import setup_bp
from webpanel.security_routes import security_bp
from webpanel.scripts_routes import scripts_bp
from webpanel.proxy_routes import proxy_bp
from webpanel.plugin_loader import plugin_bp
from webpanel.platforms_routes import platforms_bp
from webpanel.pi_routes import pi_bp
from webpanel.notifications_routes import notifications_bp
from webpanel.models import models_bp
from webpanel.media_routes import media_bp
from webpanel.knowledge_routes import knowledge_bp
from webpanel.job_scheduler import scheduler_bp
from webpanel.chatbot import chatbot_bp
from webpanel.backups_routes import backups_bp
from webpanel.api_docs_routes import api_docs_bp
from webpanel.analytics_routes import analytics_bp
from webpanel.ai_monitor_api import ai_monitor_bp
from webpanel.admin_blueprint import admin_bp
import json
import logging
import sys
from datetime import datetime
from pathlib import Path

import psutil
from flask import Flask, jsonify, redirect, render_template, request, url_for

# Add webpanel to path
sys.path.insert(0, str(Path(__file__).parent / "webpanel"))


# Import all blueprints

# Import newly generated blueprints

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class NoxPanelEnhancedApp:
    """Enhanced NoxPanel Application with all features"""

    def __init__(self):
        self.app = Flask(__name__,
                         template_folder='templates',
                         static_folder='static')

        # Configure app
        self.app.secret_key = 'noxpanel-enhanced-v6-key'
        self.app.config['JSON_SORT_KEYS'] = False

        # Initialize
        self._setup_routes()
        self._register_blueprints()
        self._setup_error_handlers()

        logger.info("🚀 NoxPanel Enhanced App v6.0 initialized")

    def _setup_routes(self):
        """Setup main application routes"""

        @self.app.route('/')
        def index():
            """Enhanced main dashboard"""
            try:
                # Get system stats
                cpu_percent = psutil.cpu_percent()
                memory = psutil.virtual_memory()
                disk = psutil.disk_usage('/')

                # Platform status
                platforms = {
                    'heimnetz': {'status': 'healthy', 'port': 5100},
                    'ai_panel': {'status': 'healthy', 'port': 5002},
                    'media_center': {'status': 'initializing', 'port': None},
                    'security_hub': {'status': 'healthy', 'port': None},
                    'system_tools': {'status': 'healthy', 'port': None}
                }

                stats = {
                    'cpu_percent': cpu_percent,
                    'memory_percent': memory.percent,
                    'disk_percent': (disk.used / disk.total) * 100,
                    'uptime': self._get_uptime(),
                    'platforms': platforms,
                    'total_routes': len([rule.rule for rule in self.app.url_map.iter_rules()]),
                    'features_available': 13
                }

                return render_template('enhanced_gateway.html',
                                       title="NoxPanel Gateway v6.0",
                                       stats=stats)
            except Exception as e:
                logger.error(f"Dashboard error: {e}")
                return render_template('enhanced_gateway.html',
                                       title="NoxPanel Gateway v6.0",
                                       stats={},
                                       error=str(e))

        @self.app.route('/api/health')
        def health_check():
            """Enhanced health check"""
            try:
                health_data = {
                    'status': 'healthy',
                    'timestamp': datetime.now().isoformat(),
                    'version': '6.0.0',
                    'features': {
                        'vm_manager': True,
                        'proxy_manager': True,
                        'script_runner': True,
                        'media_center': True,
                        'pi_monitor': True,
                        'setup_wizard': True,
                        'analytics': True,
                        'security_center': True,
                        'platform_switcher': True,
                        'updates_manager': True,
                        'backup_manager': True,
                        'notifications': True,
                        'api_docs': True
                    },
                    'system': {
                        'cpu_percent': psutil.cpu_percent(),
                        'memory_percent': psutil.virtual_memory().percent,
                        'disk_percent': (lambda d: (d.used / d.total) * 100)(psutil.disk_usage('/')),
                        'process_count': len(psutil.pids())
                    }
                }
                return jsonify(health_data)
            except Exception as e:
                logger.error(f"Health check error: {e}")
                return jsonify({'status': 'error', 'message': str(e)}), 500

        @self.app.route('/api/platforms')
        def platforms_status():
            """Get all platform status"""
            try:
                platforms = {
                    'heimnetz': {
                        'name': 'Heimnetz Core',
                        'description': 'Network management and infrastructure',
                        'status': 'healthy',
                        'url': '/platforms/heimnetz',
                        'icon': 'fas fa-network-wired',
                        'color': '#007bff'
                    },
                    'ai_panel': {
                        'name': 'AI Control Panel',
                        'description': 'AI model management and monitoring',
                        'status': 'healthy',
                        'url': '/ai-monitor',
                        'icon': 'fas fa-robot',
                        'color': '#28a745'
                    },
                    'media_center': {
                        'name': 'Media Center',
                        'description': 'Media streaming and downloads',
                        'status': 'initializing',
                        'url': '/media',
                        'icon': 'fas fa-film',
                        'color': '#dc3545'
                    },
                    'security_hub': {
                        'name': 'Security Hub',
                        'description': 'Security monitoring and controls',
                        'status': 'healthy',
                        'url': '/security',
                        'icon': 'fas fa-shield-alt',
                        'color': '#ffc107'
                    },
                    'system_tools': {
                        'name': 'System Tools',
                        'description': 'Administrative utilities and tools',
                        'status': 'healthy',
                        'url': '/admin',
                        'icon': 'fas fa-tools',
                        'color': '#6f42c1'
                    }
                }
                return jsonify(platforms)
            except Exception as e:
                logger.error(f"Platforms status error: {e}")
                return jsonify({'error': str(e)}), 500

        @self.app.route('/api/stats')
        def system_stats():
            """Get comprehensive system statistics"""
            try:
                stats = {
                    'timestamp': datetime.now().isoformat(),
                    'system': {
                        'cpu': {
                            'percent': psutil.cpu_percent(),
                            'count': psutil.cpu_count(),
                            'freq': psutil.cpu_freq()._asdict() if psutil.cpu_freq() else None
                        },
                        'memory': psutil.virtual_memory()._asdict(),
                        'disk': psutil.disk_usage('/')._asdict(),
                        'network': {
                            'connections': len(psutil.net_connections()),
                            'stats': psutil.net_io_counters()._asdict()
                        }
                    },
                    'application': {
                        'version': '6.0.0',
                        'uptime': self._get_uptime(),
                        'routes_registered': len([rule.rule for rule in self.app.url_map.iter_rules()]),
                        'blueprints': list(self.app.blueprints.keys())
                    }
                }
                return jsonify(stats)
            except Exception as e:
                logger.error(f"Stats error: {e}")
                return jsonify({'error': str(e)}), 500

    def _register_blueprints(self):
        """Register all application blueprints"""
        blueprints = [
            # Core blueprints
            (knowledge_bp, "Knowledge Management"),
            (admin_bp, "Admin Panel"),
            (scheduler_bp, "Job Scheduler"),
            (plugin_bp, "Plugin Manager"),
            (chatbot_bp, "AI Chatbot"),
            (models_bp, "AI Models"),
            (ai_monitor_bp, "AI Monitor"),

            # Enhanced feature blueprints
            (vm_bp, "VM Manager"),
            (proxy_bp, "SSL/Proxy Manager"),
            (scripts_bp, "Script Runner"),
            (media_bp, "Media Center"),
            (pi_bp, "Pi Node Monitor"),
            (setup_bp, "Setup Wizard"),
            (analytics_bp, "Analytics Dashboard"),
            (security_bp, "Security Center"),
            (platforms_bp, "Platform Switcher"),
            (updates_bp, "Updates Manager"),
            (backups_bp, "Backup Manager"),
            (notifications_bp, "Notifications Center"),
            (api_docs_bp, "API Documentation")
        ]

        registered_count = 0
        for blueprint, description in blueprints:
            try:
                self.app.register_blueprint(blueprint)
                logger.info(f"✅ Registered: {description}")
                registered_count += 1
            except Exception as e:
                logger.error(f"❌ Failed to register {description}: {e}")

        logger.info(
            f"🎉 Successfully registered {registered_count}/{len(blueprints)} blueprints")

    def _setup_error_handlers(self):
        """Setup error handlers"""

        @self.app.errorhandler(404)
        def not_found(error):
            return render_template('errors/404.html'), 404

        @self.app.errorhandler(500)
        def internal_error(error):
            return render_template('errors/500.html'), 500

    def _get_uptime(self):
        """Get system uptime"""
        try:
            import time
            boot_time = psutil.boot_time()
            uptime_seconds = time.time() - boot_time
            return int(uptime_seconds)
        except:
            return 0

    def run(self, host='127.0.0.1', port=5004, debug=False):
        """Run the enhanced application"""
        logger.info(f"🚀 Starting NoxPanel Enhanced v6.0 on {host}:{port}")
        logger.info(f"📊 {len(self.app.blueprints)} blueprints registered")
        logger.info(
            f"🔗 {len([rule.rule for rule in self.app.url_map.iter_rules()])} routes available")

        self.app.run(host=host, port=port, debug=debug)

# Create enhanced dashboard template


def create_enhanced_dashboard_template():
    """Create the enhanced dashboard template"""
    template_path = Path(__file__).parent / "templates" / \
        "enhanced_dashboard.html"

    template_content = '''{% extends "base.html" %}

{% block title %}NoxPanel Enhanced v6.0{% endblock %}

{% block extra_css %}
<style>
.platform-card {
    transition: all 0.3s ease;
    border: none;
    border-radius: 12px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    overflow: hidden;
}

.platform-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0,0,0,0.1);
}

.platform-header {
    background: linear-gradient(135deg, var(--bs-primary) 0%, var(--bs-info) 100%);
    color: white;
    padding: 2rem;
    position: relative;
    overflow: hidden;
}

.platform-header::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 100%;
    height: 100%;
    background: rgba(255,255,255,0.1);
    transform: rotate(45deg);
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
}

.stat-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    border-left: 4px solid var(--bs-primary);
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.stat-value {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--bs-primary);
    margin-bottom: 0.5rem;
}

.feature-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin: 2rem 0;
}

.feature-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
}

.feature-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.feature-icon {
    width: 60px;
    height: 60px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: white;
    margin-bottom: 1rem;
}

.status-healthy { background: #28a745; }
.status-warning { background: #ffc107; }
.status-error { background: #dc3545; }
.status-info { background: #17a2b8; }

@media (max-width: 768px) {
    .stats-grid, .feature-grid {
        grid-template-columns: 1fr;
    }
    
    .platform-header {
        padding: 1rem;
    }
}
</style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="platform-header text-center">
                <h1 class="display-4 mb-3">
                    <i class="fas fa-rocket me-3"></i>NoxPanel Enhanced v6.0
                </h1>
                <p class="lead mb-0">Unified AI & Infrastructure Management Platform</p>
                <small class="opacity-75">All features deployed and operational</small>
            </div>
        </div>
    </div>

    <!-- System Stats -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-value">{{ stats.cpu_percent|default(0)|round(1) }}%</div>
            <div class="text-muted">CPU Usage</div>
            <div class="progress mt-2" style="height: 6px;">
                <div class="progress-bar" style="width: {{ stats.cpu_percent|default(0) }}%"></div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-value">{{ stats.memory_percent|default(0)|round(1) }}%</div>
            <div class="text-muted">Memory Usage</div>
            <div class="progress mt-2" style="height: 6px;">
                <div class="progress-bar bg-success" style="width: {{ stats.memory_percent|default(0) }}%"></div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-value">{{ stats.disk_percent|default(0)|round(1) }}%</div>
            <div class="text-muted">Disk Usage</div>
            <div class="progress mt-2" style="height: 6px;">
                <div class="progress-bar bg-warning" style="width: {{ stats.disk_percent|default(0) }}%"></div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-value">{{ stats.features_available|default(13) }}</div>
            <div class="text-muted">Features Available</div>
            <div class="text-success small mt-1">
                <i class="fas fa-check-circle me-1"></i>All Operational
            </div>
        </div>
    </div>

    <!-- Platform Features -->
    <div class="row mb-4">
        <div class="col-12">
            <h3 class="mb-3">
                <i class="fas fa-th-large me-2"></i>Platform Features
            </h3>
        </div>
    </div>

    <div class="feature-grid">
        <!-- VM Manager -->
        <div class="feature-card">
            <div class="feature-icon status-info">
                <i class="fas fa-server"></i>
            </div>
            <h5>VM Manager</h5>
            <p class="text-muted small">Proxmox VM management interface</p>
            <a href="/vm" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- SSL/Proxy Manager -->
        <div class="feature-card">
            <div class="feature-icon status-healthy">
                <i class="fas fa-shield-alt"></i>
            </div>
            <h5>SSL/Proxy Manager</h5>
            <p class="text-muted small">Certificate and reverse proxy configurator</p>
            <a href="/proxy" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- Script Runner -->
        <div class="feature-card">
            <div class="feature-icon status-warning">
                <i class="fas fa-terminal"></i>
            </div>
            <h5>Script Runner</h5>
            <p class="text-muted small">Enhanced script execution with logging</p>
            <a href="/scripts" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- Media Center -->
        <div class="feature-card">
            <div class="feature-icon status-error">
                <i class="fas fa-film"></i>
            </div>
            <h5>Media Center</h5>
            <p class="text-muted small">Seedbox and download manager</p>
            <a href="/media" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- Pi Monitor -->
        <div class="feature-card">
            <div class="feature-icon status-healthy">
                <i class="fas fa-microchip"></i>
            </div>
            <h5>Pi Node Monitor</h5>
            <p class="text-muted small">Raspberry Pi monitoring and control</p>
            <a href="/pi" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- Setup Wizard -->
        <div class="feature-card">
            <div class="feature-icon status-info">
                <i class="fas fa-magic"></i>
            </div>
            <h5>Setup Wizard</h5>
            <p class="text-muted small">First-time setup and configuration</p>
            <a href="/setup" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- Analytics -->
        <div class="feature-card">
            <div class="feature-icon status-healthy">
                <i class="fas fa-chart-line"></i>
            </div>
            <h5>Analytics Dashboard</h5>
            <p class="text-muted small">System metrics and AI logs</p>
            <a href="/analytics" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- Security Center -->
        <div class="feature-card">
            <div class="feature-icon status-warning">
                <i class="fas fa-lock"></i>
            </div>
            <h5>Security Center</h5>
            <p class="text-muted small">Security monitoring and controls</p>
            <a href="/security" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- Platform Switcher -->
        <div class="feature-card">
            <div class="feature-icon status-info">
                <i class="fas fa-th-large"></i>
            </div>
            <h5>Platform Switcher</h5>
            <p class="text-muted small">Visual platform navigation</p>
            <a href="/platforms" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- Updates Manager -->
        <div class="feature-card">
            <div class="feature-icon status-healthy">
                <i class="fas fa-sync"></i>
            </div>
            <h5>Updates Manager</h5>
            <p class="text-muted small">Git auto-update and versioning</p>
            <a href="/updates" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- Backup Manager -->
        <div class="feature-card">
            <div class="feature-icon status-healthy">
                <i class="fas fa-archive"></i>
            </div>
            <h5>Backup Manager</h5>
            <p class="text-muted small">Backup status and restore</p>
            <a href="/backups" class="btn btn-outline-primary btn-sm">Access</a>
        </div>

        <!-- Notifications -->
        <div class="feature-card">
            <div class="feature-icon status-info">
                <i class="fas fa-bell"></i>
            </div>
            <h5>Notifications Center</h5>
            <p class="text-muted small">Notification management</p>
            <a href="/notifications" class="btn btn-outline-primary btn-sm">Access</a>
        </div>
    </div>

    <!-- Quick Links -->
    <div class="row mt-5">
        <div class="col-12">
            <div class="card">
                <div class="card-body text-center">
                    <h5>Quick Access</h5>
                    <div class="btn-group flex-wrap" role="group">
                        <a href="/knowledge" class="btn btn-outline-primary">
                            <i class="fas fa-brain me-1"></i>Knowledge Base
                        </a>
                        <a href="/admin" class="btn btn-outline-success">
                            <i class="fas fa-cog me-1"></i>Admin Panel
                        </a>
                        <a href="/plugins" class="btn btn-outline-info">
                            <i class="fas fa-plug me-1"></i>Plugin Manager
                        </a>
                        <a href="/api/health" class="btn btn-outline-warning">
                            <i class="fas fa-heartbeat me-1"></i>Health Check
                        </a>
                        <a href="/api/docs" class="btn btn-outline-secondary">
                            <i class="fas fa-code me-1"></i>API Docs
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
// Auto-refresh stats every 30 seconds
function refreshStats() {
    fetch('/api/stats')
        .then(response => response.json())
        .then(data => {
            // Update CPU
            const cpuPercent = data.system.cpu.percent;
            document.querySelector('.stat-card:nth-child(1) .stat-value').textContent = cpuPercent.toFixed(1) + '%';
            document.querySelector('.stat-card:nth-child(1) .progress-bar').style.width = cpuPercent + '%';
            
            // Update Memory
            const memPercent = data.system.memory.percent;
            document.querySelector('.stat-card:nth-child(2) .stat-value').textContent = memPercent.toFixed(1) + '%';
            document.querySelector('.stat-card:nth-child(2) .progress-bar').style.width = memPercent + '%';
            
            // Update Disk
            const diskPercent = (data.system.disk.used / data.system.disk.total) * 100;
            document.querySelector('.stat-card:nth-child(3) .stat-value').textContent = diskPercent.toFixed(1) + '%';
            document.querySelector('.stat-card:nth-child(3) .progress-bar').style.width = diskPercent + '%';
        })
        .catch(error => console.log('Stats refresh error:', error));
}

// Refresh every 30 seconds
setInterval(refreshStats, 30000);

// Show loading animation on feature cards
document.querySelectorAll('.feature-card a').forEach(link => {
    link.addEventListener('click', function(e) {
        this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Loading...';
    });
});
</script>
{% endblock %}'''

    try:
        template_path.parent.mkdir(parents=True, exist_ok=True)
        template_path.write_text(template_content, encoding='utf-8')
        logger.info(f"✅ Created enhanced dashboard template: {template_path}")
    except Exception as e:
        logger.error(f"Failed to create dashboard template: {e}")


def main():
    """Main execution function"""
    print("🎯 NoxPanel Enhanced Application v6.0")
    print("=" * 50)

    # Create enhanced dashboard template
    create_enhanced_dashboard_template()

    # Initialize and run app
    app = NoxPanelEnhancedApp()

    try:
        app.run(host='127.0.0.1', port=5004, debug=False)
    except KeyboardInterrupt:
        logger.info("🛑 Application stopped by user")
    except Exception as e:
        logger.error(f"❌ Application error: {e}")


if __name__ == "__main__":
    main()
