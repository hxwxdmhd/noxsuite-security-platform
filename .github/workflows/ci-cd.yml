name: 🚀 NoxSuite CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Linting
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy pytest pytest-cov bandit safety
        
    - name: 🎨 Check code formatting (Black)
      run: black --check --diff .
      
    - name: 📚 Check import sorting (isort)
      run: isort --check-only --diff .
      
    - name: 🔍 Lint code (Flake8)
      run: flake8 . --max-line-length=88 --extend-ignore=E203,W503
      
    - name: 🔧 Type checking (MyPy)
      run: mypy src/ --ignore-missing-imports || true
      
    - name: 🔒 Security linting (Bandit)
      run: bandit -r . -x tests/ || true
      
    - name: 🛡️ Dependency security check (Safety)
      run: safety check || true

  # Unit Tests
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    services:
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: noxsuite_test
          MYSQL_USER: noxsuite
          MYSQL_PASSWORD: noxsuite_test
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 3306:3306
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: 🧪 Run tests with coverage
      env:
        DATABASE_TEST_URL: mysql+pymysql://noxsuite:noxsuite_test@localhost:3306/noxsuite_test
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80 || true
        
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📋 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        
    - name: 🛡️ Run dependency security scan
      run: safety check --json --output safety-report.json || true
      
    - name: 🔍 Run static security analysis
      run: bandit -r . -f json -o bandit-report.json || true
      
    - name: 🔎 Run Semgrep security scan
      run: |
        python -m semgrep --config=auto --json --output=semgrep-report.json . || true
        
    - name: 📋 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  # Docker Build
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: 🐳 Build Docker image
      run: |
        docker build -t noxsuite-security-platform:latest .
        docker images
        
    - name: 🔍 Test Docker image
      run: |
        docker run --rm noxsuite-security-platform:latest python --version

  # Integration Tests
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, test]
    
    services:
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: noxsuite_integration
          MYSQL_USER: noxsuite
          MYSQL_PASSWORD: noxsuite_integration
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 3306:3306
      
      redis:
        image: redis:7-alpine
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: 🔧 Set up test environment
      env:
        DATABASE_URL: mysql+pymysql://noxsuite:noxsuite_integration@localhost:3306/noxsuite_integration
        REDIS_URL: redis://localhost:6379/0
      run: |
        python scripts/setup-dev.py || true
        
    - name: 🧪 Run integration tests
      env:
        DATABASE_URL: mysql+pymysql://noxsuite:noxsuite_integration@localhost:3306/noxsuite_integration
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest tests/integration/ -v || true

  # Performance Tests
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📋 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust pytest-benchmark
        
    - name: ⚡ Run performance tests
      run: |
        python -m pytest tests/ -k "performance" --benchmark-only || true

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker, integration]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: 🐳 Build and push Docker image
      run: |
        echo "Building staging image..."
        docker build -t noxsuite-staging:${{ github.sha }} .
        
    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here

  # Deploy to Production
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, integration, performance]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: 🐳 Build and push Docker image
      run: |
        echo "Building production image..."
        docker build -t noxsuite-production:${{ github.sha }} .
        
    - name: 🎯 Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here

  # Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [quality, test, security, docker, integration, performance]
    
    steps:
    - name: 🧹 Clean up artifacts
      run: |
        echo "Cleaning up temporary artifacts..."
        
    - name: 📊 Generate pipeline report
      run: |
        echo "## 🚀 NoxSuite CI/CD Pipeline Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Pipeline Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality Checks**: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Unit Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Scan**: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Build**: ${{ needs.docker.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests**: ${{ needs.integration.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Review test coverage reports" >> $GITHUB_STEP_SUMMARY
        echo "- Address any security findings" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor performance metrics" >> $GITHUB_STEP_SUMMARY