
# ðŸ§  NGINX Load Balancer Configuration - RLVR Reasoning Embedded
# ==============================================================

# REASONING: Upstream configuration for service discovery
# Logic: Define backend services with health checks and weights
# Evidence: NGINX upstream module standard for load balancing
upstream fastapi_backend {
    # REASONING: Equal weight distribution for fair load balancing
    server fastapi-1:8000 weight=1 max_fails=3 fail_timeout=30s;
    server fastapi-2:8000 weight=1 max_fails=3 fail_timeout=30s;
    server fastapi-3:8000 weight=1 max_fails=3 fail_timeout=30s;
    
    # REASONING: Health check configuration
    # Logic: 3 failures in 30 seconds marks instance as down
    # Evidence: Balanced between responsiveness and stability
}

server {
    listen 80;
    server_name localhost;
    
    # REASONING: Load balancing configuration
    # Logic: Round-robin distribution with health awareness
    location / {
        proxy_pass http://fastapi_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # REASONING: Timeout configuration
        # Logic: 30s timeout prevents hanging requests
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # REASONING: Health check endpoint for monitoring
    # Logic: External health monitoring of load balancer itself
    location /lb-health {
        access_log off;
        return 200 "Load balancer operational\n";
        add_header Content-Type text/plain;
    }
    
    # REASONING: Metrics endpoint for Prometheus
    # Logic: NGINX metrics collection for monitoring
    location /metrics {
        stub_status on;
        access_log off;
        allow all;
    }
}
